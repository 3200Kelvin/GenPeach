/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_cursor_script__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/cursor/script */ \"./src/cursor/script.js\");\n/* harmony import */ var _src_smoke_script__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/smoke/script */ \"./src/smoke/script.js\");\n/* harmony import */ var _src_unblur_script__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/unblur/script */ \"./src/unblur/script.js\");\n/* harmony import */ var _src_expandables_script__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/expandables/script */ \"./src/expandables/script.js\");\n/* harmony import */ var _src_solutions_script__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/solutions/script */ \"./src/solutions/script.js\");\n\r\n\r\n\r\n\r\n\r\n\r\ngsap.defaults({\r\n    duration: 0,\r\n    ease: 'power1.inOut',\r\n});\r\n\r\n(0,_src_cursor_script__WEBPACK_IMPORTED_MODULE_0__.useHeroCursor)();\r\n(0,_src_unblur_script__WEBPACK_IMPORTED_MODULE_2__.useUnblur)();\r\n(0,_src_smoke_script__WEBPACK_IMPORTED_MODULE_1__.useSmoke)();\r\n(0,_src_expandables_script__WEBPACK_IMPORTED_MODULE_3__.useExpandables)();\r\n(0,_src_solutions_script__WEBPACK_IMPORTED_MODULE_4__.useSolutionsSlider)();\n\n//# sourceURL=webpack://lass/./index.js?");

/***/ }),

/***/ "./src/common/cursorMove.js":
/*!**********************************!*\
  !*** ./src/common/cursorMove.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCursorMove: () => (/* binding */ useCursorMove)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"./src/common/helpers.js\");\n\r\n\r\nconst useCursorMove = (cursor, elements, { x: startX = 0, y: startY = 0, isSmooth = true } = {}) => {\r\n    if (_helpers__WEBPACK_IMPORTED_MODULE_0__.isTouchscreen) {\r\n        return () => {};\r\n    }\r\n\r\n    const position = {\r\n        x: startX,\r\n        y: startY,\r\n    };\r\n    const positionProxy = new Proxy(position, {\r\n        set: (target, key, value) => {\r\n            target[key] = value;\r\n            requestAnimationFrame(moveTip);\r\n            return true;\r\n        },\r\n    });\r\n\r\n    const setX = isSmooth ? (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getSetVariable)(positionProxy, 'x') : (val) => positionProxy.x = val;\r\n    const setY = isSmooth ? (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getSetVariable)(positionProxy, 'y') : (val) => positionProxy.y = val;;\r\n    const moveRaf = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getRaf)();\r\n\r\n    if (elements.length) {\r\n        elements.forEach((element) => element.addEventListener('mouseenter', onMouseEnter))\r\n    } else if (elements) {\r\n        elements.addEventListener('mouseenter', onMouseEnter);\r\n    }\r\n\r\n    return { setTarget };\r\n\r\n    function onMouseEnter(event) {\r\n        const { pageX, pageY, target } = event;\r\n        setTarget(pageX, pageY);\r\n        cursor.classList.add('entered');\r\n        \r\n        target.addEventListener('mousemove', onMouseMove);\r\n        target.addEventListener('mouseleave', omMouseLeave);\r\n    }\r\n\r\n    function onMouseMove(event) {\r\n        const { pageX, pageY } = event;\r\n        setTarget(pageX, pageY);\r\n    }\r\n\r\n    function omMouseLeave(event) {\r\n        const { pageX, pageY, target } = event;\r\n        setTarget(pageX, pageY);\r\n        cursor.classList.remove('entered');\r\n        \r\n        target.removeEventListener('mousemove', onMouseMove);\r\n        target.removeEventListener('mouseleave', omMouseLeave);\r\n    }\r\n\r\n    function setTarget(x, y) {\r\n        moveRaf(() => {\r\n            setX(x);\r\n            setY(y);\r\n        });\r\n    }\r\n\r\n    function moveTip() {\r\n        const { x, y } = position;\r\n        cursor.style.setProperty('--transform', `translate(${x}px, ${y}px)`);\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://lass/./src/common/cursorMove.js?");

/***/ }),

/***/ "./src/common/helpers.js":
/*!*******************************!*\
  !*** ./src/common/helpers.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   doAsync: () => (/* binding */ doAsync),\n/* harmony export */   getIsDesktop: () => (/* binding */ getIsDesktop),\n/* harmony export */   getNewValue: () => (/* binding */ getNewValue),\n/* harmony export */   getOnEnterPress: () => (/* binding */ getOnEnterPress),\n/* harmony export */   getRaf: () => (/* binding */ getRaf),\n/* harmony export */   getSessionStorageValue: () => (/* binding */ getSessionStorageValue),\n/* harmony export */   getSetVariable: () => (/* binding */ getSetVariable),\n/* harmony export */   isSafari: () => (/* binding */ isSafari),\n/* harmony export */   isTouchscreen: () => (/* binding */ isTouchscreen),\n/* harmony export */   isWeakDevice: () => (/* binding */ isWeakDevice),\n/* harmony export */   removeSessionStorageValue: () => (/* binding */ removeSessionStorageValue),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   setSessionStorageValue: () => (/* binding */ setSessionStorageValue),\n/* harmony export */   tryCatch: () => (/* binding */ tryCatch)\n/* harmony export */ });\nfunction getNewValue(current, target, time, timeCoeff = 0.01, epsilon = 1) {\r\n    const distance = target - current;\r\n    const move = distance / 2 * time * timeCoeff;\r\n    if (Math.abs(move) > Math.abs(distance)) {\r\n        return target;\r\n    }\r\n    const newValue = current + move;\r\n    if (Math.abs(newValue - target) < epsilon) {\r\n        return target;\r\n    }\r\n    return newValue;\r\n}\r\n\r\nfunction doAsync(callback, delay = 10) {\r\n    return new Promise((res) => {\r\n        callback();\r\n\r\n        setTimeout(() => {\r\n            res();\r\n        }, delay);\r\n    });\r\n}\r\n\r\nconst isTouchscreen = window.matchMedia(\"(pointer: coarse)\").matches;\r\n\r\nconst round = (num, digits = 3) => {\r\n    const coeff = Math.pow(10, digits);\r\n    return Math.round(num * coeff) / coeff;\r\n}\r\n\r\nconst tryCatch = (callback) => {\r\n    try {\r\n        return callback();\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nconst getIsDesktop = () => window.innerWidth > 991;\r\n\r\nconst isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n\r\nconst isWeakDevice = isSafari || (window.navigator.deviceMemory || 0) < 4;\r\n\r\nfunction getSetVariable(obj, value) {\r\n    return gsap.quickTo(obj, value, { duration: 0.8, ease: \"power2.out\" });\r\n}\r\n\r\nconst getRaf = () => {\r\n    let raf = null;\r\n\r\n    return function moveRaf(cb) {\r\n        if (raf) {\r\n            cancelAnimationFrame(raf);\r\n            raf = null;\r\n        }\r\n\r\n        raf = requestAnimationFrame(cb);\r\n    }\r\n};\r\n\r\nconst getSessionStorageValue = (key) => JSON.parse(sessionStorage.getItem(key));\r\nconst setSessionStorageValue = (key, value) => sessionStorage.setItem(key, JSON.stringify(value));\r\nconst removeSessionStorageValue = (key) => sessionStorage.removeItem(key);\r\n\r\nconst getOnEnterPress = (callback) => {\r\n    return (event) => {\r\n        event.stopPropagation();\r\n        if (event.key === 'Enter') {\r\n            callback();\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://lass/./src/common/helpers.js?");

/***/ }),

/***/ "./src/cursor/script.js":
/*!******************************!*\
  !*** ./src/cursor/script.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useHeroCursor: () => (/* binding */ useHeroCursor)\n/* harmony export */ });\n/* harmony import */ var _common_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/helpers */ \"./src/common/helpers.js\");\n/* harmony import */ var _common_cursorMove__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/cursorMove */ \"./src/common/cursorMove.js\");\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./style.scss */ \"./src/cursor/style.scss\");\n\r\n\r\n\r\n\r\n\r\nconst useHeroCursor = () => {\r\n    if (_common_helpers__WEBPACK_IMPORTED_MODULE_0__.isTouchscreen) {\r\n        return;\r\n    }\r\n\r\n    const hero = document.querySelector('.hero');\r\n    const cursor = hero.querySelector('.cursor');\r\n\r\n    const { setTarget } = (0,_common_cursorMove__WEBPACK_IMPORTED_MODULE_1__.useCursorMove)(cursor, hero, { x: window.innerWidth / 2, y: window.innerHeight / 2, isSmooth: false });\r\n\r\n    setTarget(window.innerWidth / 2, window.innerHeight / 2);\r\n};\r\n\n\n//# sourceURL=webpack://lass/./src/cursor/script.js?");

/***/ }),

/***/ "./src/cursor/style.scss":
/*!*******************************!*\
  !*** ./src/cursor/style.scss ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://lass/./src/cursor/style.scss?");

/***/ }),

/***/ "./src/expandables/script.js":
/*!***********************************!*\
  !*** ./src/expandables/script.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useExpandables: () => (/* binding */ useExpandables)\n/* harmony export */ });\nconst useExpandables = () => {\r\n    const expandables = document.querySelectorAll('.expandable');\r\n\r\n    expandables.forEach((expandable) => {\r\n        const container = expandable.querySelector('.expandable__container');\r\n        const openBtn = expandable.querySelector('[data-trigger=\"show-more\"]');\r\n        const closeBtn = expandable.querySelector('[data-trigger=\"show-less\"]');\r\n\r\n        gsap.timeline()\r\n            .to(container, { height: 0 })\r\n            .to(closeBtn, { display: 'none' })\r\n            .to(openBtn, { display: 'block' })\r\n            .to(container, { display: 'none' });\r\n\r\n        openBtn.addEventListener('click', expand);\r\n        closeBtn.addEventListener('click', collapse);\r\n\r\n        function expand() {\r\n            gsap.timeline()\r\n                .to(container, { display: 'block' })\r\n                .to(openBtn, { display: 'none' })\r\n                .to(closeBtn, { display: 'block' })\r\n                .to(container, { height: 'auto', duration: 0.4});\r\n        }\r\n\r\n        function collapse() {\r\n            gsap.timeline()\r\n                .to(closeBtn, { display: 'none' })\r\n                .to(openBtn, { display: 'block' })\r\n                .to(container, { height: 0, duration: 0.4 })\r\n                .to(container, { display: 'none' });\r\n        }\r\n    });\r\n};\r\n\n\n//# sourceURL=webpack://lass/./src/expandables/script.js?");

/***/ }),

/***/ "./src/smoke/script.js":
/*!*****************************!*\
  !*** ./src/smoke/script.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSmoke: () => (/* binding */ useSmoke)\n/* harmony export */ });\nconst useSmoke = () => {\r\n    const canvas = document.getElementsByTagName('canvas')[0];\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n\r\n    let config = {\r\n        SIM_RESOLUTION: 128,\r\n        DYE_RESOLUTION: 512,\r\n        DENSITY_DISSIPATION: 0.97,\r\n        VELOCITY_DISSIPATION: 0.98,\r\n        PRESSURE_DISSIPATION: 0.8,\r\n        PRESSURE_ITERATIONS: 20,\r\n        CURL: 5,\r\n        SPLAT_RADIUS: 0.2,\r\n        SHADING: true,\r\n        COLORFUL: true,\r\n        PAUSED: false,\r\n        BACK_COLOR: { r: 0, g:0, b: 0 },\r\n        TRANSPARENT: false,\r\n        BLOOM: true,\r\n        BLOOM_ITERATIONS: 8,\r\n        BLOOM_RESOLUTION: 256,\r\n        BLOOM_INTENSITY: 0.8,\r\n        BLOOM_THRESHOLD: 0.6,\r\n        BLOOM_SOFT_KNEE: 0.7\r\n    }\r\n\r\n    function pointerPrototype () {\r\n        this.id = -1;\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.down = false;\r\n        this.moved = false;\r\n        this.color = [30, 0, 300];\r\n    }\r\n\r\n    let pointers = [];\r\n    let splatStack = [];\r\n    let bloomFramebuffers = [];\r\n    pointers.push(new pointerPrototype());\r\n\r\n    const { gl, ext } = getWebGLContext(canvas);\r\n\r\n    if (isMobile())\r\n        config.SHADING = false;\r\n    if (!ext.supportLinearFiltering)\r\n    {\r\n        config.SHADING = false;\r\n        config.BLOOM = false;\r\n    }\r\n\r\n    function getWebGLContext (canvas) {\r\n        const params = { alpha: true, depth: false, stencil: false, antialias: false, preserveDrawingBuffer: false };\r\n\r\n        let gl = canvas.getContext('webgl2', params);\r\n        const isWebGL2 = !!gl;\r\n        if (!isWebGL2)\r\n            gl = canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params);\r\n\r\n        let halfFloat;\r\n        let supportLinearFiltering;\r\n        if (isWebGL2) {\r\n            gl.getExtension('EXT_color_buffer_float');\r\n            supportLinearFiltering = gl.getExtension('OES_texture_float_linear');\r\n        } else {\r\n            halfFloat = gl.getExtension('OES_texture_half_float');\r\n            supportLinearFiltering = gl.getExtension('OES_texture_half_float_linear');\r\n        }\r\n\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n\r\n        const halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat.HALF_FLOAT_OES;\r\n        let formatRGBA;\r\n        let formatRG;\r\n        let formatR;\r\n\r\n        if (isWebGL2)\r\n        {\r\n            formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);\r\n            formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\r\n            formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\r\n        }\r\n        else\r\n        {\r\n            formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\r\n            formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\r\n            formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\r\n        }\r\n\r\n        return {\r\n            gl,\r\n            ext: {\r\n                formatRGBA,\r\n                formatRG,\r\n                formatR,\r\n                halfFloatTexType,\r\n                supportLinearFiltering\r\n            }\r\n        };\r\n    }\r\n\r\n    function getSupportedFormat (gl, internalFormat, format, type)\r\n    {\r\n        if (!supportRenderTextureFormat(gl, internalFormat, format, type))\r\n        {\r\n            switch (internalFormat)\r\n            {\r\n                case gl.R16F:\r\n                    return getSupportedFormat(gl, gl.RG16F, gl.RG, type);\r\n                case gl.RG16F:\r\n                    return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        return {\r\n            internalFormat,\r\n            format\r\n        }\r\n    }\r\n\r\n    function supportRenderTextureFormat (gl, internalFormat, format, type) {\r\n        let texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);\r\n\r\n        let fbo = gl.createFramebuffer();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n        if (status != gl.FRAMEBUFFER_COMPLETE)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    function captureScreenshot () {\r\n        colorProgram.bind();\r\n        gl.uniform4f(colorProgram.uniforms.color, 0, 0, 0, 1);\r\n        blit(density.write.fbo);\r\n\r\n        render(density.write.fbo);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, density.write.fbo);\r\n\r\n        let length = dyeWidth * dyeHeight * 4;\r\n        let pixels = new Float32Array(length);\r\n        gl.readPixels(0, 0, dyeWidth, dyeHeight, gl.RGBA, gl.FLOAT, pixels);\r\n\r\n        let newPixels = new Uint8Array(length);\r\n\r\n        let id = 0;\r\n        for (let i = dyeHeight - 1; i >= 0; i--) {\r\n            for (let j = 0; j < dyeWidth; j++) {\r\n                let nid = i * dyeWidth * 4 + j * 4;\r\n                newPixels[nid + 0] = clamp01(pixels[id + 0]) * 255;\r\n                newPixels[nid + 1] = clamp01(pixels[id + 1]) * 255;\r\n                newPixels[nid + 2] = clamp01(pixels[id + 2]) * 255;\r\n                newPixels[nid + 3] = clamp01(pixels[id + 3]) * 255;\r\n                id += 4;\r\n            }\r\n        }\r\n\r\n        let captureCanvas = document.createElement('canvas');\r\n        let ctx = captureCanvas.getContext('2d');\r\n        captureCanvas.width = dyeWidth;\r\n        captureCanvas.height = dyeHeight;\r\n\r\n        let imageData = ctx.createImageData(dyeWidth, dyeHeight);\r\n        imageData.data.set(newPixels);\r\n        ctx.putImageData(imageData, 0, 0);\r\n        let datauri = captureCanvas.toDataURL();\r\n\r\n        downloadURI(\"fluid.png\", datauri);\r\n\r\n        URL.revokeObjectURL(datauri);\r\n    }\r\n\r\n    function clamp01 (input) {\r\n        return Math.min(Math.max(input, 0), 1);\r\n    }\r\n\r\n    function downloadURI (filename, uri) {\r\n        let link = document.createElement(\"a\");\r\n        link.download = filename;\r\n        link.href = uri;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n    function isMobile () {\r\n        return /Mobi|Android/i.test(navigator.userAgent);\r\n    }\r\n\r\n    class GLProgram {\r\n        constructor (vertexShader, fragmentShader) {\r\n            this.uniforms = {};\r\n            this.program = gl.createProgram();\r\n\r\n            gl.attachShader(this.program, vertexShader);\r\n            gl.attachShader(this.program, fragmentShader);\r\n            gl.linkProgram(this.program);\r\n\r\n            if (!gl.getProgramParameter(this.program, gl.LINK_STATUS))\r\n                throw gl.getProgramInfoLog(this.program);\r\n\r\n            const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\r\n            for (let i = 0; i < uniformCount; i++) {\r\n                const uniformName = gl.getActiveUniform(this.program, i).name;\r\n                this.uniforms[uniformName] = gl.getUniformLocation(this.program, uniformName);\r\n            }\r\n        }\r\n\r\n        bind () {\r\n            gl.useProgram(this.program);\r\n        }\r\n    }\r\n\r\n    function compileShader (type, source) {\r\n        const shader = gl.createShader(type);\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\r\n            throw gl.getShaderInfoLog(shader);\r\n\r\n        return shader;\r\n    };\r\n\r\n    const baseVertexShader = compileShader(gl.VERTEX_SHADER, `\r\n        precision highp float;\r\n        attribute vec2 aPosition;\r\n        varying vec2 vUv;\r\n        varying vec2 vL;\r\n        varying vec2 vR;\r\n        varying vec2 vT;\r\n        varying vec2 vB;\r\n        uniform vec2 texelSize;\r\n        void main () {\r\n            vUv = aPosition * 0.5 + 0.5;\r\n            vL = vUv - vec2(texelSize.x, 0.0);\r\n            vR = vUv + vec2(texelSize.x, 0.0);\r\n            vT = vUv + vec2(0.0, texelSize.y);\r\n            vB = vUv - vec2(0.0, texelSize.y);\r\n            gl_Position = vec4(aPosition, 0.0, 1.0);\r\n        }\r\n    `);\r\n\r\n    const clearShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision mediump float;\r\n        precision mediump sampler2D;\r\n        varying highp vec2 vUv;\r\n        uniform sampler2D uTexture;\r\n        uniform float value;\r\n        void main () {\r\n            gl_FragColor = value * texture2D(uTexture, vUv);\r\n        }\r\n    `);\r\n\r\n    const colorShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision mediump float;\r\n        uniform vec4 color;\r\n        void main () {\r\n            gl_FragColor = color;\r\n        }\r\n    `);\r\n\r\n    const backgroundShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision highp float;\r\n        precision highp sampler2D;\r\n        varying vec2 vUv;\r\n        uniform sampler2D uTexture;\r\n        uniform float aspectRatio;\r\n        #define SCALE 25.0\r\n        void main () {\r\n            vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\r\n            float v = mod(uv.x + uv.y, 2.0);\r\n            v = v * 0.1 + 0.8;\r\n            gl_FragColor = vec4(vec3(v), 1.0);\r\n        }\r\n    `);\r\n\r\n    const displayShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision highp float;\r\n        precision highp sampler2D;\r\n        varying vec2 vUv;\r\n        uniform sampler2D uTexture;\r\n        void main () {\r\n            vec3 C = texture2D(uTexture, vUv).rgb;\r\n            float a = max(C.r, max(C.g, C.b));\r\n            gl_FragColor = vec4(C, a);\r\n        }\r\n    `);\r\n\r\n    const displayBloomShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision highp float;\r\n        precision highp sampler2D;\r\n        varying vec2 vUv;\r\n        uniform sampler2D uTexture;\r\n        uniform sampler2D uBloom;\r\n        uniform sampler2D uDithering;\r\n        uniform vec2 ditherScale;\r\n        void main () {\r\n            vec3 C = texture2D(uTexture, vUv).rgb;\r\n            vec3 bloom = texture2D(uBloom, vUv).rgb;\r\n            vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\r\n            noise = noise * 2.0 - 1.0;\r\n            bloom += noise / 800.0;\r\n            bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\r\n            C += bloom;\r\n            float a = max(C.r, max(C.g, C.b));\r\n            gl_FragColor = vec4(C, a);\r\n        }\r\n    `);\r\n\r\n    const displayShadingShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision highp float;\r\n        precision highp sampler2D;\r\n        varying vec2 vUv;\r\n        varying vec2 vL;\r\n        varying vec2 vR;\r\n        varying vec2 vT;\r\n        varying vec2 vB;\r\n        uniform sampler2D uTexture;\r\n        uniform vec2 texelSize;\r\n        void main () {\r\n            vec3 L = texture2D(uTexture, vL).rgb;\r\n            vec3 R = texture2D(uTexture, vR).rgb;\r\n            vec3 T = texture2D(uTexture, vT).rgb;\r\n            vec3 B = texture2D(uTexture, vB).rgb;\r\n            vec3 C = texture2D(uTexture, vUv).rgb;\r\n            float dx = length(R) - length(L);\r\n            float dy = length(T) - length(B);\r\n            vec3 n = normalize(vec3(dx, dy, length(texelSize)));\r\n            vec3 l = vec3(0.0, 0.0, 1.0);\r\n            float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\r\n            C.rgb *= diffuse;\r\n            float a = max(C.r, max(C.g, C.b));\r\n            gl_FragColor = vec4(C, a);\r\n        }\r\n    `);\r\n\r\n    const displayBloomShadingShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision highp float;\r\n        precision highp sampler2D;\r\n        varying vec2 vUv;\r\n        varying vec2 vL;\r\n        varying vec2 vR;\r\n        varying vec2 vT;\r\n        varying vec2 vB;\r\n        uniform sampler2D uTexture;\r\n        uniform sampler2D uBloom;\r\n        uniform sampler2D uDithering;\r\n        uniform vec2 ditherScale;\r\n        uniform vec2 texelSize;\r\n        void main () {\r\n            vec3 L = texture2D(uTexture, vL).rgb;\r\n            vec3 R = texture2D(uTexture, vR).rgb;\r\n            vec3 T = texture2D(uTexture, vT).rgb;\r\n            vec3 B = texture2D(uTexture, vB).rgb;\r\n            vec3 C = texture2D(uTexture, vUv).rgb;\r\n            float dx = length(R) - length(L);\r\n            float dy = length(T) - length(B);\r\n            vec3 n = normalize(vec3(dx, dy, length(texelSize)));\r\n            vec3 l = vec3(0.0, 0.0, 1.0);\r\n            float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\r\n            C *= diffuse;\r\n            vec3 bloom = texture2D(uBloom, vUv).rgb;\r\n            vec3 noise = texture2D(uDithering, vUv * ditherScale).rgb;\r\n            noise = noise * 2.0 - 1.0;\r\n            bloom += noise / 800.0;\r\n            bloom = pow(bloom.rgb, vec3(1.0 / 2.2));\r\n            C += bloom;\r\n            float a = max(C.r, max(C.g, C.b));\r\n            gl_FragColor = vec4(C, a);\r\n        }\r\n    `);\r\n\r\n    const bloomPrefilterShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision mediump float;\r\n        precision mediump sampler2D;\r\n        varying vec2 vUv;\r\n        uniform sampler2D uTexture;\r\n        uniform vec3 curve;\r\n        uniform float threshold;\r\n        void main () {\r\n            vec3 c = texture2D(uTexture, vUv).rgb;\r\n            float br = max(c.r, max(c.g, c.b));\r\n            float rq = clamp(br - curve.x, 0.0, curve.y);\r\n            rq = curve.z * rq * rq;\r\n            c *= max(rq, br - threshold) / max(br, 0.0001);\r\n            gl_FragColor = vec4(c, 0.0);\r\n        }\r\n    `);\r\n\r\n    const bloomBlurShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision mediump float;\r\n        precision mediump sampler2D;\r\n        varying vec2 vL;\r\n        varying vec2 vR;\r\n        varying vec2 vT;\r\n        varying vec2 vB;\r\n        uniform sampler2D uTexture;\r\n        void main () {\r\n            vec4 sum = vec4(0.0);\r\n            sum += texture2D(uTexture, vL);\r\n            sum += texture2D(uTexture, vR);\r\n            sum += texture2D(uTexture, vT);\r\n            sum += texture2D(uTexture, vB);\r\n            sum *= 0.25;\r\n            gl_FragColor = sum;\r\n        }\r\n    `);\r\n\r\n    const bloomFinalShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision mediump float;\r\n        precision mediump sampler2D;\r\n        varying vec2 vL;\r\n        varying vec2 vR;\r\n        varying vec2 vT;\r\n        varying vec2 vB;\r\n        uniform sampler2D uTexture;\r\n        uniform float intensity;\r\n        void main () {\r\n            vec4 sum = vec4(0.0);\r\n            sum += texture2D(uTexture, vL);\r\n            sum += texture2D(uTexture, vR);\r\n            sum += texture2D(uTexture, vT);\r\n            sum += texture2D(uTexture, vB);\r\n            sum *= 0.25;\r\n            gl_FragColor = sum * intensity;\r\n        }\r\n    `);\r\n\r\n    const splatShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision highp float;\r\n        precision highp sampler2D;\r\n        varying vec2 vUv;\r\n        uniform sampler2D uTarget;\r\n        uniform float aspectRatio;\r\n        uniform vec3 color;\r\n        uniform vec2 point;\r\n        uniform float radius;\r\n        void main () {\r\n            vec2 p = vUv - point.xy;\r\n            p.x *= aspectRatio;\r\n            vec3 splat = exp(-dot(p, p) / radius) * color;\r\n            vec3 base = texture2D(uTarget, vUv).xyz;\r\n            gl_FragColor = vec4(base + splat, 1.0);\r\n        }\r\n    `);\r\n\r\n    const advectionManualFilteringShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision highp float;\r\n        precision highp sampler2D;\r\n        varying vec2 vUv;\r\n        uniform sampler2D uVelocity;\r\n        uniform sampler2D uSource;\r\n        uniform vec2 texelSize;\r\n        uniform vec2 dyeTexelSize;\r\n        uniform float dt;\r\n        uniform float dissipation;\r\n        vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\r\n            vec2 st = uv / tsize - 0.5;\r\n            vec2 iuv = floor(st);\r\n            vec2 fuv = fract(st);\r\n            vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\r\n            vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\r\n            vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\r\n            vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\r\n            return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\r\n        }\r\n        void main () {\r\n            vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\r\n            gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);\r\n            gl_FragColor.a = 1.0;\r\n        }\r\n    `);\r\n\r\n    const advectionShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision highp float;\r\n        precision highp sampler2D;\r\n        varying vec2 vUv;\r\n        uniform sampler2D uVelocity;\r\n        uniform sampler2D uSource;\r\n        uniform vec2 texelSize;\r\n        uniform float dt;\r\n        uniform float dissipation;\r\n        void main () {\r\n            vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\r\n            gl_FragColor = dissipation * texture2D(uSource, coord);\r\n            gl_FragColor.a = 1.0;\r\n        }\r\n    `);\r\n\r\n    const divergenceShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision mediump float;\r\n        precision mediump sampler2D;\r\n        varying highp vec2 vUv;\r\n        varying highp vec2 vL;\r\n        varying highp vec2 vR;\r\n        varying highp vec2 vT;\r\n        varying highp vec2 vB;\r\n        uniform sampler2D uVelocity;\r\n        void main () {\r\n            float L = texture2D(uVelocity, vL).x;\r\n            float R = texture2D(uVelocity, vR).x;\r\n            float T = texture2D(uVelocity, vT).y;\r\n            float B = texture2D(uVelocity, vB).y;\r\n            vec2 C = texture2D(uVelocity, vUv).xy;\r\n            if (vL.x < 0.0) { L = -C.x; }\r\n            if (vR.x > 1.0) { R = -C.x; }\r\n            if (vT.y > 1.0) { T = -C.y; }\r\n            if (vB.y < 0.0) { B = -C.y; }\r\n            float div = 0.5 * (R - L + T - B);\r\n            gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\r\n        }\r\n    `);\r\n\r\n    const curlShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision mediump float;\r\n        precision mediump sampler2D;\r\n        varying highp vec2 vUv;\r\n        varying highp vec2 vL;\r\n        varying highp vec2 vR;\r\n        varying highp vec2 vT;\r\n        varying highp vec2 vB;\r\n        uniform sampler2D uVelocity;\r\n        void main () {\r\n            float L = texture2D(uVelocity, vL).y;\r\n            float R = texture2D(uVelocity, vR).y;\r\n            float T = texture2D(uVelocity, vT).x;\r\n            float B = texture2D(uVelocity, vB).x;\r\n            float vorticity = R - L - T + B;\r\n            gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\r\n        }\r\n    `);\r\n\r\n    const vorticityShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision highp float;\r\n        precision highp sampler2D;\r\n        varying vec2 vUv;\r\n        varying vec2 vL;\r\n        varying vec2 vR;\r\n        varying vec2 vT;\r\n        varying vec2 vB;\r\n        uniform sampler2D uVelocity;\r\n        uniform sampler2D uCurl;\r\n        uniform float curl;\r\n        uniform float dt;\r\n        void main () {\r\n            float L = texture2D(uCurl, vL).x;\r\n            float R = texture2D(uCurl, vR).x;\r\n            float T = texture2D(uCurl, vT).x;\r\n            float B = texture2D(uCurl, vB).x;\r\n            float C = texture2D(uCurl, vUv).x;\r\n            vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\r\n            force /= length(force) + 0.0001;\r\n            force *= curl * C;\r\n            force.y *= -1.0;\r\n            vec2 vel = texture2D(uVelocity, vUv).xy;\r\n            gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\r\n        }\r\n    `);\r\n\r\n    const pressureShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision mediump float;\r\n        precision mediump sampler2D;\r\n        varying highp vec2 vUv;\r\n        varying highp vec2 vL;\r\n        varying highp vec2 vR;\r\n        varying highp vec2 vT;\r\n        varying highp vec2 vB;\r\n        uniform sampler2D uPressure;\r\n        uniform sampler2D uDivergence;\r\n        vec2 boundary (vec2 uv) {\r\n            return uv;\r\n            // uncomment if you use wrap or repeat texture mode\r\n            // uv = min(max(uv, 0.0), 1.0);\r\n            // return uv;\r\n        }\r\n        void main () {\r\n            float L = texture2D(uPressure, boundary(vL)).x;\r\n            float R = texture2D(uPressure, boundary(vR)).x;\r\n            float T = texture2D(uPressure, boundary(vT)).x;\r\n            float B = texture2D(uPressure, boundary(vB)).x;\r\n            float C = texture2D(uPressure, vUv).x;\r\n            float divergence = texture2D(uDivergence, vUv).x;\r\n            float pressure = (L + R + B + T - divergence) * 0.25;\r\n            gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\r\n        }\r\n    `);\r\n\r\n    const gradientSubtractShader = compileShader(gl.FRAGMENT_SHADER, `\r\n        precision mediump float;\r\n        precision mediump sampler2D;\r\n        varying highp vec2 vUv;\r\n        varying highp vec2 vL;\r\n        varying highp vec2 vR;\r\n        varying highp vec2 vT;\r\n        varying highp vec2 vB;\r\n        uniform sampler2D uPressure;\r\n        uniform sampler2D uVelocity;\r\n        vec2 boundary (vec2 uv) {\r\n            return uv;\r\n            // uv = min(max(uv, 0.0), 1.0);\r\n            // return uv;\r\n        }\r\n        void main () {\r\n            float L = texture2D(uPressure, boundary(vL)).x;\r\n            float R = texture2D(uPressure, boundary(vR)).x;\r\n            float T = texture2D(uPressure, boundary(vT)).x;\r\n            float B = texture2D(uPressure, boundary(vB)).x;\r\n            vec2 velocity = texture2D(uVelocity, vUv).xy;\r\n            velocity.xy -= vec2(R - L, T - B);\r\n            gl_FragColor = vec4(velocity, 0.0, 1.0);\r\n        }\r\n    `);\r\n\r\n    const blit = (() => {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW);\r\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\r\n        gl.enableVertexAttribArray(0);\r\n\r\n        return (destination) => {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, destination);\r\n            gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\r\n        }\r\n    })();\r\n\r\n    let simWidth;\r\n    let simHeight;\r\n    let dyeWidth;\r\n    let dyeHeight;\r\n    let density;\r\n    let velocity;\r\n    let divergence;\r\n    let curl;\r\n    let pressure;\r\n    let bloom;\r\n\r\n    let ditheringTexture = createTextureAsync('LDR_RGB1_0.png');\r\n\r\n    const clearProgram               = new GLProgram(baseVertexShader, clearShader);\r\n    const colorProgram               = new GLProgram(baseVertexShader, colorShader);\r\n    const backgroundProgram          = new GLProgram(baseVertexShader, backgroundShader);\r\n    const displayProgram             = new GLProgram(baseVertexShader, displayShader);\r\n    const displayBloomProgram        = new GLProgram(baseVertexShader, displayBloomShader);\r\n    const displayShadingProgram      = new GLProgram(baseVertexShader, displayShadingShader);\r\n    const displayBloomShadingProgram = new GLProgram(baseVertexShader, displayBloomShadingShader);\r\n    const bloomPrefilterProgram      = new GLProgram(baseVertexShader, bloomPrefilterShader);\r\n    const bloomBlurProgram           = new GLProgram(baseVertexShader, bloomBlurShader);\r\n    const bloomFinalProgram          = new GLProgram(baseVertexShader, bloomFinalShader);\r\n    const splatProgram               = new GLProgram(baseVertexShader, splatShader);\r\n    const advectionProgram           = new GLProgram(baseVertexShader, ext.supportLinearFiltering ? advectionShader : advectionManualFilteringShader);\r\n    const divergenceProgram          = new GLProgram(baseVertexShader, divergenceShader);\r\n    const curlProgram                = new GLProgram(baseVertexShader, curlShader);\r\n    const vorticityProgram           = new GLProgram(baseVertexShader, vorticityShader);\r\n    const pressureProgram            = new GLProgram(baseVertexShader, pressureShader);\r\n    const gradienSubtractProgram     = new GLProgram(baseVertexShader, gradientSubtractShader);\r\n\r\n    function initFramebuffers () {\r\n        let simRes = getResolution(config.SIM_RESOLUTION);\r\n        let dyeRes = getResolution(config.DYE_RESOLUTION);\r\n\r\n        simWidth  = simRes.width;\r\n        simHeight = simRes.height;\r\n        dyeWidth  = dyeRes.width;\r\n        dyeHeight = dyeRes.height;\r\n\r\n        const texType = ext.halfFloatTexType;\r\n        const rgba    = ext.formatRGBA;\r\n        const rg      = ext.formatRG;\r\n        const r       = ext.formatR;\r\n        const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\r\n\r\n        if (density == null)\r\n            density = createDoubleFBO(dyeWidth, dyeHeight, rgba.internalFormat, rgba.format, texType, filtering);\r\n        else\r\n            density = resizeDoubleFBO(density, dyeWidth, dyeHeight, rgba.internalFormat, rgba.format, texType, filtering);\r\n\r\n        if (velocity == null)\r\n            velocity = createDoubleFBO(simWidth, simHeight, rg.internalFormat, rg.format, texType, filtering);\r\n        else\r\n            velocity = resizeDoubleFBO(velocity, simWidth, simHeight, rg.internalFormat, rg.format, texType, filtering);\r\n\r\n        divergence = createFBO      (simWidth, simHeight, r.internalFormat, r.format, texType, gl.NEAREST);\r\n        curl       = createFBO      (simWidth, simHeight, r.internalFormat, r.format, texType, gl.NEAREST);\r\n        pressure   = createDoubleFBO(simWidth, simHeight, r.internalFormat, r.format, texType, gl.NEAREST);\r\n\r\n        initBloomFramebuffers();\r\n    }\r\n\r\n    function initBloomFramebuffers () {\r\n        let res = getResolution(config.BLOOM_RESOLUTION);\r\n\r\n        const texType = ext.halfFloatTexType;\r\n        const rgba = ext.formatRGBA;\r\n        const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\r\n\r\n        bloom = createFBO(res.width, res.height, rgba.internalFormat, rgba.format, texType, filtering);\r\n\r\n        bloomFramebuffers.length = 0;\r\n        for (let i = 0; i < config.BLOOM_ITERATIONS; i++)\r\n        {\r\n            let width = res.width >> (i + 1);\r\n            let height = res.height >> (i + 1);\r\n\r\n            if (width < 2 || height < 2) break;\r\n\r\n            let fbo = createFBO(width, height, rgba.internalFormat, rgba.format, texType, filtering);\r\n            bloomFramebuffers.push(fbo);\r\n        }\r\n    }\r\n\r\n    function createFBO (w, h, internalFormat, format, type, param) {\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        let texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);\r\n\r\n        let fbo = gl.createFramebuffer();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n        gl.viewport(0, 0, w, h);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n        return {\r\n            texture,\r\n            fbo,\r\n            width: w,\r\n            height: h,\r\n            attach (id) {\r\n                gl.activeTexture(gl.TEXTURE0 + id);\r\n                gl.bindTexture(gl.TEXTURE_2D, texture);\r\n                return id;\r\n            }\r\n        };\r\n    }\r\n\r\n    function createDoubleFBO (w, h, internalFormat, format, type, param) {\r\n        let fbo1 = createFBO(w, h, internalFormat, format, type, param);\r\n        let fbo2 = createFBO(w, h, internalFormat, format, type, param);\r\n\r\n        return {\r\n            get read () {\r\n                return fbo1;\r\n            },\r\n            set read (value) {\r\n                fbo1 = value;\r\n            },\r\n            get write () {\r\n                return fbo2;\r\n            },\r\n            set write (value) {\r\n                fbo2 = value;\r\n            },\r\n            swap () {\r\n                let temp = fbo1;\r\n                fbo1 = fbo2;\r\n                fbo2 = temp;\r\n            }\r\n        }\r\n    }\r\n\r\n    function resizeFBO (target, w, h, internalFormat, format, type, param) {\r\n        let newFBO = createFBO(w, h, internalFormat, format, type, param);\r\n        clearProgram.bind();\r\n        gl.uniform1i(clearProgram.uniforms.uTexture, target.attach(0));\r\n        gl.uniform1f(clearProgram.uniforms.value, 1);\r\n        blit(newFBO.fbo);\r\n        return newFBO;\r\n    }\r\n\r\n    function resizeDoubleFBO (target, w, h, internalFormat, format, type, param) {\r\n        target.read = resizeFBO(target.read, w, h, internalFormat, format, type, param);\r\n        target.write = createFBO(w, h, internalFormat, format, type, param);\r\n        return target;\r\n    }\r\n\r\n    function createTextureAsync (url) {\r\n        let texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255]));\r\n\r\n        let obj = {\r\n            texture,\r\n            width: 1,\r\n            height: 1,\r\n            attach (id) {\r\n                gl.activeTexture(gl.TEXTURE0 + id);\r\n                gl.bindTexture(gl.TEXTURE_2D, texture);\r\n                return id;\r\n            }\r\n        };\r\n\r\n        let image = new Image();\r\n        image.onload = () => {\r\n            obj.width = image.width;\r\n            obj.height = image.height;\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\r\n        };\r\n        image.src = url;\r\n\r\n        return obj;\r\n    }\r\n\r\n    initFramebuffers();\r\n    // multipleSplats(parseInt(Math.random() * 20) + 5);\r\n\r\n    let lastColorChangeTime = Date.now();\r\n\r\n    update();\r\n\r\n    function update () {\r\n        resizeCanvas();\r\n        input();\r\n        if (!config.PAUSED)\r\n            step(0.016);\r\n        render(null);\r\n        requestAnimationFrame(update);\r\n    }\r\n\r\n    function input () {\r\n        // if (splatStack.length > 0)\r\n        //     multipleSplats(splatStack.pop());\r\n\r\n        for (let i = 0; i < pointers.length; i++) {\r\n            const p = pointers[i];\r\n            if (p.moved) {\r\n                splat(p.x, p.y, p.dx, p.dy, p.color);\r\n                p.moved = false;\r\n            }\r\n        }\r\n\r\n        if (!config.COLORFUL)\r\n            return;\r\n\r\n        if (lastColorChangeTime + 100 < Date.now())\r\n        {\r\n            lastColorChangeTime = Date.now();\r\n            for (let i = 0; i < pointers.length; i++) {\r\n                const p = pointers[i];\r\n                p.color = generateColor(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    function step (dt) {\r\n        gl.disable(gl.BLEND);\r\n        gl.viewport(0, 0, simWidth, simHeight);\r\n\r\n        curlProgram.bind();\r\n        gl.uniform2f(curlProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);\r\n        gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n        blit(curl.fbo);\r\n\r\n        vorticityProgram.bind();\r\n        gl.uniform2f(vorticityProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);\r\n        gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n        gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1));\r\n        gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);\r\n        gl.uniform1f(vorticityProgram.uniforms.dt, dt);\r\n        blit(velocity.write.fbo);\r\n        velocity.swap();\r\n\r\n        divergenceProgram.bind();\r\n        gl.uniform2f(divergenceProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);\r\n        gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n        blit(divergence.fbo);\r\n\r\n        clearProgram.bind();\r\n        gl.uniform1i(clearProgram.uniforms.uTexture, pressure.read.attach(0));\r\n        gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);\r\n        blit(pressure.write.fbo);\r\n        pressure.swap();\r\n\r\n        pressureProgram.bind();\r\n        gl.uniform2f(pressureProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);\r\n        gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0));\r\n        for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {\r\n            gl.uniform1i(pressureProgram.uniforms.uPressure, pressure.read.attach(1));\r\n            blit(pressure.write.fbo);\r\n            pressure.swap();\r\n        }\r\n\r\n        gradienSubtractProgram.bind();\r\n        gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);\r\n        gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.read.attach(0));\r\n        gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.read.attach(1));\r\n        blit(velocity.write.fbo);\r\n        velocity.swap();\r\n\r\n        advectionProgram.bind();\r\n        gl.uniform2f(advectionProgram.uniforms.texelSize, 1.0 / simWidth, 1.0 / simHeight);\r\n        if (!ext.supportLinearFiltering)\r\n            gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, 1.0 / simWidth, 1.0 / simHeight);\r\n        let velocityId = velocity.read.attach(0);\r\n        gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId);\r\n        gl.uniform1i(advectionProgram.uniforms.uSource, velocityId);\r\n        gl.uniform1f(advectionProgram.uniforms.dt, dt);\r\n        gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);\r\n        blit(velocity.write.fbo);\r\n        velocity.swap();\r\n\r\n        gl.viewport(0, 0, dyeWidth, dyeHeight);\r\n\r\n        if (!ext.supportLinearFiltering)\r\n            gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, 1.0 / dyeWidth, 1.0 / dyeHeight);\r\n        gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n        gl.uniform1i(advectionProgram.uniforms.uSource, density.read.attach(1));\r\n        gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);\r\n        blit(density.write.fbo);\r\n        density.swap();\r\n    }\r\n\r\n    function render (target) {\r\n        if (config.BLOOM)\r\n            applyBloom(density.read, bloom);\r\n\r\n        if (target == null || !config.TRANSPARENT) {\r\n            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n            gl.enable(gl.BLEND);\r\n        }\r\n        else {\r\n            gl.disable(gl.BLEND);\r\n        }\r\n\r\n        let width  = target == null ? gl.drawingBufferWidth : dyeWidth;\r\n        let height = target == null ? gl.drawingBufferHeight : dyeHeight;\r\n\r\n        gl.viewport(0, 0, width, height);\r\n\r\n        if (!config.TRANSPARENT) {\r\n            colorProgram.bind();\r\n            let bc = config.BACK_COLOR;\r\n            gl.uniform4f(colorProgram.uniforms.color, bc.r / 255, bc.g / 255, bc.b / 255, 1);\r\n            blit(target);\r\n        }\r\n\r\n        if (target == null && config.TRANSPARENT) {\r\n            backgroundProgram.bind();\r\n            gl.uniform1f(backgroundProgram.uniforms.aspectRatio, canvas.width / canvas.height);\r\n            blit(null);\r\n        }\r\n\r\n        if (config.SHADING) {\r\n            let program = config.BLOOM ? displayBloomShadingProgram : displayShadingProgram;\r\n            program.bind();\r\n            gl.uniform2f(program.uniforms.texelSize, 1.0 / width, 1.0 / height);\r\n            gl.uniform1i(program.uniforms.uTexture, density.read.attach(0));\r\n            if (config.BLOOM) {\r\n                gl.uniform1i(program.uniforms.uBloom, bloom.attach(1));\r\n                gl.uniform1i(program.uniforms.uDithering, ditheringTexture.attach(2));\r\n                let scale = getTextureScale(ditheringTexture, width, height);\r\n                gl.uniform2f(program.uniforms.ditherScale, scale.x, scale.y);\r\n            }\r\n        }\r\n        else {\r\n            let program = config.BLOOM ? displayBloomProgram : displayProgram;\r\n            program.bind();\r\n            gl.uniform1i(program.uniforms.uTexture, density.read.attach(0));\r\n            if (config.BLOOM) {\r\n                gl.uniform1i(program.uniforms.uBloom, bloom.attach(1));\r\n                gl.uniform1i(program.uniforms.uDithering, ditheringTexture.attach(2));\r\n                let scale = getTextureScale(ditheringTexture, width, height);\r\n                gl.uniform2f(program.uniforms.ditherScale, scale.x, scale.y);\r\n            }\r\n        }\r\n\r\n        blit(target);\r\n    }\r\n\r\n    function applyBloom (source, destination) {\r\n        if (bloomFramebuffers.length < 2)\r\n            return;\r\n\r\n        let last = destination;\r\n\r\n        gl.disable(gl.BLEND);\r\n        bloomPrefilterProgram.bind();\r\n        let knee = config.BLOOM_THRESHOLD * config.BLOOM_SOFT_KNEE + 0.0001;\r\n        let curve0 = config.BLOOM_THRESHOLD - knee;\r\n        let curve1 = knee * 2;\r\n        let curve2 = 0.25 / knee;\r\n        gl.uniform3f(bloomPrefilterProgram.uniforms.curve, curve0, curve1, curve2);\r\n        gl.uniform1f(bloomPrefilterProgram.uniforms.threshold, config.BLOOM_THRESHOLD);\r\n        gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, source.attach(0));\r\n        gl.viewport(0, 0, last.width, last.height);\r\n        blit(last.fbo);\r\n\r\n        bloomBlurProgram.bind();\r\n        for (let i = 0; i < bloomFramebuffers.length; i++) {\r\n            let dest = bloomFramebuffers[i];\r\n            gl.uniform2f(bloomBlurProgram.uniforms.texelSize, 1.0 / last.width, 1.0 / last.height);\r\n            gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\r\n            gl.viewport(0, 0, dest.width, dest.height);\r\n            blit(dest.fbo);\r\n            last = dest;\r\n        }\r\n\r\n        gl.blendFunc(gl.ONE, gl.ONE);\r\n        gl.enable(gl.BLEND);\r\n\r\n        for (let i = bloomFramebuffers.length - 2; i >= 0; i--) {\r\n            let baseTex = bloomFramebuffers[i];\r\n            gl.uniform2f(bloomBlurProgram.uniforms.texelSize, 1.0 / last.width, 1.0 / last.height);\r\n            gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\r\n            gl.viewport(0, 0, baseTex.width, baseTex.height);\r\n            blit(baseTex.fbo);\r\n            last = baseTex;\r\n        }\r\n\r\n        gl.disable(gl.BLEND);\r\n        bloomFinalProgram.bind();\r\n        gl.uniform2f(bloomFinalProgram.uniforms.texelSize, 1.0 / last.width, 1.0 / last.height);\r\n        gl.uniform1i(bloomFinalProgram.uniforms.uTexture, last.attach(0));\r\n        gl.uniform1f(bloomFinalProgram.uniforms.intensity, config.BLOOM_INTENSITY);\r\n        gl.viewport(0, 0, destination.width, destination.height);\r\n        blit(destination.fbo);\r\n    }\r\n\r\n    function splat (x, y, dx, dy, color) {\r\n        gl.viewport(0, 0, simWidth, simHeight);\r\n        splatProgram.bind();\r\n        gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.attach(0));\r\n        gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);\r\n        gl.uniform2f(splatProgram.uniforms.point, x / canvas.width, 1.0 - y / canvas.height);\r\n        gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);\r\n        gl.uniform1f(splatProgram.uniforms.radius, config.SPLAT_RADIUS / 100.0);\r\n        blit(velocity.write.fbo);\r\n        velocity.swap();\r\n\r\n        gl.viewport(0, 0, dyeWidth, dyeHeight);\r\n        gl.uniform1i(splatProgram.uniforms.uTarget, density.read.attach(0));\r\n        gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);\r\n        blit(density.write.fbo);\r\n        density.swap();\r\n    }\r\n\r\n    function multipleSplats (amount) {\r\n        for (let i = 0; i < amount; i++) {\r\n            const color = generateColor();\r\n            color.r *= 10.0;\r\n            color.g *= 10.0;\r\n            color.b *= 10.0;\r\n            const x = canvas.width * Math.random();\r\n            const y = canvas.height * Math.random();\r\n            const dx = 1000 * (Math.random() - 0.5);\r\n            const dy = 1000 * (Math.random() - 0.5);\r\n            splat(x, y, dx, dy, color);\r\n        }\r\n    }\r\n\r\n    function resizeCanvas () {\r\n        if (canvas.width != canvas.clientWidth || canvas.height != canvas.clientHeight) {\r\n            canvas.width = canvas.clientWidth;\r\n            canvas.height = canvas.clientHeight;\r\n            initFramebuffers();\r\n        }\r\n    }\r\n\r\n    canvas.addEventListener('mousemove', e => {\r\n        pointers[0].moved = pointers[0].down;\r\n        pointers[0].dx = (e.offsetX - pointers[0].x) * 5.0;\r\n        pointers[0].dy = (e.offsetY - pointers[0].y) * 5.0;\r\n        pointers[0].x = e.offsetX;\r\n        pointers[0].y = e.offsetY;\r\n    });\r\n\r\n    canvas.addEventListener('touchmove', e => {\r\n        e.preventDefault();\r\n        const touches = e.targetTouches;\r\n        for (let i = 0; i < touches.length; i++) {\r\n            let pointer = pointers[i];\r\n            pointer.moved = pointer.down;\r\n            pointer.dx = (touches[i].pageX - pointer.x) * 8.0;\r\n            pointer.dy = (touches[i].pageY - pointer.y) * 8.0;\r\n            pointer.x = touches[i].pageX;\r\n            pointer.y = touches[i].pageY;\r\n        }\r\n    }, false);\r\n\r\n    // canvas.addEventListener('mousedown', () => {\r\n        pointers[0].down = true;\r\n        pointers[0].color = generateColor();\r\n    // });\r\n\r\n    canvas.addEventListener('touchstart', e => {\r\n        e.preventDefault();\r\n        const touches = e.targetTouches;\r\n        for (let i = 0; i < touches.length; i++) {\r\n            if (i >= pointers.length)\r\n                pointers.push(new pointerPrototype());\r\n\r\n            pointers[i].id = touches[i].identifier;\r\n            pointers[i].down = true;\r\n            pointers[i].x = touches[i].pageX;\r\n            pointers[i].y = touches[i].pageY;\r\n            pointers[i].color = generateColor();\r\n        }\r\n    });\r\n\r\n    window.addEventListener('mouseup', () => {\r\n        // pointers[0].down = false;\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        const touches = e.changedTouches;\r\n        for (let i = 0; i < touches.length; i++)\r\n            for (let j = 0; j < pointers.length; j++)\r\n                if (touches[i].identifier == pointers[j].id)\r\n                    pointers[j].down = false;\r\n    });\r\n\r\n    window.addEventListener('keydown', e => {\r\n        if (e.code === 'KeyP')\r\n            config.PAUSED = !config.PAUSED;\r\n        if (e.key === ' ')\r\n            splatStack.push(parseInt(Math.random() * 20) + 5);\r\n    });\r\n\r\n    function generateColor (isGray = false) {\r\n        let c = isGray ? HSVtoRGB(180, 0.0, 0.5) : HSVtoRGB(Math.random(), 1.0, 1.0);\r\n        // const c = {\r\n        //     r: 211,\r\n        //     g: 211,\r\n        //     b: 211\r\n        // };\r\n        c.r *= 0.15;\r\n        c.g *= 0.15;\r\n        c.b *= 0.15;\r\n        return c;\r\n    }\r\n\r\n    function HSVtoRGB (h, s, v) {\r\n        let r, g, b, i, f, p, q, t;\r\n        i = Math.floor(h * 6);\r\n        f = h * 6 - i;\r\n        p = v * (1 - s);\r\n        q = v * (1 - f * s);\r\n        t = v * (1 - (1 - f) * s);\r\n\r\n        switch (i % 6) {\r\n            case 0: r = v, g = t, b = p; break;\r\n            case 1: r = q, g = v, b = p; break;\r\n            case 2: r = p, g = v, b = t; break;\r\n            case 3: r = p, g = q, b = v; break;\r\n            case 4: r = t, g = p, b = v; break;\r\n            case 5: r = v, g = p, b = q; break;\r\n        }\r\n\r\n        return {\r\n            r,\r\n            g,\r\n            b\r\n        };\r\n    }\r\n\r\n    function getResolution (resolution) {\r\n        let aspectRatio = gl.drawingBufferWidth / gl.drawingBufferHeight;\r\n        if (aspectRatio < 1)\r\n            aspectRatio = 1.0 / aspectRatio;\r\n\r\n        let max = Math.round(resolution * aspectRatio);\r\n        let min = Math.round(resolution);\r\n\r\n        if (gl.drawingBufferWidth > gl.drawingBufferHeight)\r\n            return { width: max, height: min };\r\n        else\r\n            return { width: min, height: max };\r\n    }\r\n\r\n    function getTextureScale (texture, width, height) {\r\n        return {\r\n            x: width / texture.width,\r\n            y: height / texture.height\r\n        };\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://lass/./src/smoke/script.js?");

/***/ }),

/***/ "./src/solutions/script.js":
/*!*********************************!*\
  !*** ./src/solutions/script.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSolutionsSlider: () => (/* binding */ useSolutionsSlider)\n/* harmony export */ });\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./src/solutions/style.scss\");\n\r\n\r\nconst useSolutionsSlider = () => {\r\n    const slider = document.querySelector('.slider');\r\n    const entries = document.querySelectorAll('.slider__content__entry');\r\n    const images = slider.querySelectorAll('.slider__image');\r\n    const dotsContainer = slider.querySelector('.slider__content__dots')\r\n    const dot = dotsContainer.querySelector('.slider__content__dot');\r\n    const dots = [dot];\r\n    const [previousBtn, nextBtn] = slider.querySelectorAll('.slider__content__button');\r\n\r\n    const totalSlides = entries.length;\r\n    const totalSections = totalSlides + 1;\r\n\r\n    const BLUR_STRENGTH = 15;\r\n    const BLUR_TIME = 0.4;\r\n    const FADE_TIME = 0.2;\r\n    const TOTAL_TIME = BLUR_TIME * 2 + FADE_TIME;\r\n    const DOT_OPACITY = {\r\n        DEFAULT: 0.15,\r\n        ACTIVE: 0.8,\r\n    };\r\n\r\n    addDots();\r\n    showInitial(0);\r\n    let current = 0;\r\n\r\n    ScrollTrigger.create({\r\n        trigger: slider,\r\n        start: \"top top\",\r\n        end: \"bottom bottom\",\r\n        scrub: true,\r\n        onUpdate: (self) => {\r\n            const progress = self.progress; // value from 0 to 1\r\n            const currentIndex = Math.floor(progress * totalSections);\r\n\r\n            setActive(currentIndex);\r\n        }\r\n    });\r\n\r\n    function addDots() {\r\n        for (let i = dots.length; i < totalSlides; i++) {\r\n            const dotClone = dot.cloneNode();\r\n            dotsContainer.appendChild(dotClone);\r\n            dots.push(dotClone);\r\n        }\r\n    }\r\n\r\n    function setActive(index) {\r\n        if (current === index || index >= totalSlides) {\r\n            return;\r\n        }\r\n\r\n        changeSlides(current, index);\r\n\r\n        current = index;\r\n    }\r\n\r\n    function showInitial(index) {\r\n        gsap.to(entries[index], { display: 'block', opacity: 1 });\r\n        gsap.to(images[index], { display: 'block', opacity: 1, filter: 'blur(0px)' });\r\n        gsap.to(dots[index], { opacity: DOT_OPACITY.ACTIVE });\r\n    }\r\n\r\n    function changeSlides(oldIndex, newIndex) {\r\n        gsap.timeline()\r\n            .to(entries[newIndex], { display: 'block', opacity: 0 })\r\n            .to(entries[newIndex], { opacity: 1, duration: TOTAL_TIME });\r\n        \r\n        gsap.timeline()\r\n            .to(entries[oldIndex], { opacity: 0, duration: TOTAL_TIME })\r\n            .to(entries[oldIndex], { display: 'none' });\r\n\r\n        gsap.timeline()\r\n            .to(images[newIndex], { display: 'block', opacity: 0, filter: `blur(${BLUR_STRENGTH}px)` })\r\n            .to(images[oldIndex], { filter: `blur(${BLUR_STRENGTH}px)`, duration: BLUR_TIME })\r\n            .add(() => {\r\n                gsap.to(images[newIndex], { opacity: 1, duration: FADE_TIME });\r\n                return gsap.to(images[oldIndex], { opacity: 0, duration: FADE_TIME });\r\n            })\r\n            .to(images[newIndex], { filter: 'blur(0px)', duration: BLUR_TIME });\r\n\r\n        gsap.to(dots[newIndex], { opacity: DOT_OPACITY.ACTIVE, duration: TOTAL_TIME });\r\n        gsap.to(dots[oldIndex], { opacity: DOT_OPACITY.DEFAULT, duration: TOTAL_TIME });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://lass/./src/solutions/script.js?");

/***/ }),

/***/ "./src/solutions/style.scss":
/*!**********************************!*\
  !*** ./src/solutions/style.scss ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://lass/./src/solutions/style.scss?");

/***/ }),

/***/ "./src/unblur/script.js":
/*!******************************!*\
  !*** ./src/unblur/script.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useUnblur: () => (/* binding */ useUnblur)\n/* harmony export */ });\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./src/unblur/style.scss\");\n\r\n\r\nconst useUnblur = () => {\r\n    const headings = document.querySelectorAll('[data-animation=\"unblur-letters\"]');\r\n\r\n    headings.forEach(initHeading);\r\n\r\n    function initHeading(heading) {\r\n        const highlight = heading.querySelector('.highlighted');\r\n\r\n        if (highlight) {\r\n            setTimeout(() => {\r\n                highlight.classList.add('highlighted--transition');\r\n            }, 10);\r\n        }\r\n\r\n        const split = SplitText.create(heading, {\r\n            type: \"chars\",\r\n        });\r\n\r\n        gsap.to(split.chars, {\r\n            transform: 'scale(0.95)',\r\n            opacity: 0,\r\n            filter: 'blur(10px)',\r\n        });\r\n\r\n        gsap.timeline({\r\n            scrollTrigger: {\r\n                trigger: heading,\r\n                start: 'top 85%',\r\n            }\r\n        })\r\n            .to(split.chars, {\r\n                transform: 'scale(1)',\r\n                opacity: 1,\r\n                filter: 'blur(0px)',\r\n                duration: 0.4,\r\n                stagger: 0.02,\r\n            })\r\n            .add(() => {\r\n                if (highlight) {\r\n                    highlight.classList.add('highlighted--shown');\r\n                }\r\n            });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://lass/./src/unblur/script.js?");

/***/ }),

/***/ "./src/unblur/style.scss":
/*!*******************************!*\
  !*** ./src/unblur/style.scss ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://lass/./src/unblur/style.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;